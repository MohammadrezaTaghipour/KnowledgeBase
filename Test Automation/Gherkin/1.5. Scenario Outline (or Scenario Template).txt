The keyword **Scenario Template** is a synonym of the keyword **Scenario Outline**.


**DEFINITION** _Scenario outline_—A template that similar scenarios can share so you don’t have to repeat the same Given-When-Then template throughout your feature file

# When to use
- Whenever you see that the scenarios become too similar, which makes for boring reading
- Whenever the feature file grows in size, which doesn’t seem efficient
- Whenever you want to test for multiple cases that share similarities but yield different outcomes

# Refactoring redundant scenarios with scenario outlines

Ideally, you want to have two types of scenarios:
- Scenarios that visually group similar examples together and use the same underlying template for all examples. The visual grouping notifies the reader that it’s safe to skim the examples (it is in fact, scenario outlines).
- Scenarios that are important enough to stand on their own, letting readers know they should focus when reading them.

A feature file with scenarios having similar structures:

    Feature: Shipping

    Scenario: Shipping PDFs
    Given a PDF book in Simona's cart
    When she pays for it
    Then the book should be sent to a mobile device

    Scenario: Shipping audiobooks
    Given an audiobook in Simona's cart
    When she pays for it
    Then the book should be sent over email

    Scenario: Shipping hardcovers
    Given a hardcover book in Simona's cart
    When she pays for it
    Then the book should be shipped physically

    Scenario: Shipping paperbacks
    Given a paperback book in Simona's cart
    When she pays for it
    Then the book should be shipped physically

    Scenario: Shipping Audio CDs
    Given an Audio CD book in Simona's cart
    When she pays for it
    Then the book should be shipped physically


Same scenario, refactored with scenario outline:

    Feature: Shipping

    Scenario Outline: Shipping
    Given a <format> book in Simona's cart
    When she pays for it
    Then the book should be <shipped>
    Examples:
       | format    | shipped                 |
       | PDF       | sent to a mobile device |
       | Audiobook | sent over email         |
       | Hardcover | shipped physically      |
       | Paperback | shipped physically      |
       | Audio CD  | shipped physically      |


# The Examples table

The Examples table contains all the examples. The syntax is straightforward. Tables can be created easily: use a vertical stroke (|) as the first character of the line, and also separate table cells with it. The first row is the header row containing the Scenario Outline parameters. After the header, each example has its own row.


# Parameters

The Scenario Outline parameters go in angle brackets (<>), like <format> and <shipped>. They allow the test runner to paste the examples from the table into the outline you’ve written.


# Advantages of scenario outlines

- Outlines take much less space.
- Outlines group concrete examples according to high-level business rules.


#  Maintaining scenario outlines

For more information, visit and read [Growing and maintaining scenario outlines](/Home/Test-Automation/Gherkin/5.-Tips-and-Experiences/5.9.-Growing-and-maintaining-scenario-outlines)


# Disadvantages of scenario outlines

let’s consider the other side of the story. It’s time to talk about the downsides—because there are some. 
In truth, the Gherkin community tends to frown on using scenario outlines, because outlines written by inexperienced Gherkin practitioners often look more like code than business-level features. It’s true: the attributes, brackets, and tables can sometimes appear scary to people who are new to Gherkin. Unfortunately, that can make outlines less accessible to business stakeholders.

So should you use scenario outlines or not? The answer isn’t straightforward. Good, easy-to-read scenario outlines with business-level examples can play a part in getting buy-in from other stakeholders for using SBE. But bad examples can also make accepting SBE (specification by example) much harder for anyone who isn’t already convinced about using the methodology.


# Scenario outline anti-patterns

- Typical data validations
- Simple combinatorial outcomes (For more information, read [Pairwise testing](/Home/Test-Automation/Gherkin/5.-Tips-and-Experiences/5.10.-Pairwise-testing))

The overall point is that you shouldn’t test with Gherkin; automating them would only magnify the inefficiency of the entire specification suite. The main role of scenarios is to provide a communication framework for talking with stakeholders.


